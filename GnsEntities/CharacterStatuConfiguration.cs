// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace GnsEntities
{

    // CharacterStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharacterStatu>
    {
        public CharacterStatuConfiguration()
            : this("dbo")
        {
        }

        public CharacterStatuConfiguration(string schema)
        {
            ToTable("CharacterStatus", schema);
            HasKey(x => x.CharacterId);

            Property(x => x.CharacterId).HasColumnName(@"CharacterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CharacterPrimaryResourceId).HasColumnName(@"CharacterPrimaryResourceId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterSecondaryResourceId).HasColumnName(@"CharacterSecondaryResourceId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CharacterPrimaryResource).WithMany(b => b.CharacterStatus_CharacterPrimaryResourceId).HasForeignKey(c => c.CharacterPrimaryResourceId).WillCascadeOnDelete(false); // FK_CharacterStatus_Primary_Resource
            HasOptional(a => a.CharacterSecondaryResource).WithMany(b => b.CharacterStatus_CharacterSecondaryResourceId).HasForeignKey(c => c.CharacterSecondaryResourceId).WillCascadeOnDelete(false); // FK_CharacterStatus_Secondary_Resource
            HasRequired(a => a.Character).WithOptional(b => b.CharacterStatu).WillCascadeOnDelete(false); // FK_CharacterStatus_Character
        }
    }

}
// </auto-generated>
