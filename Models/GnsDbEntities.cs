

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Models\App.config"
//     Connection String Name: "GnsConnectionString"
//     Connection String:      "Data Source=DESKTOP-088173O\MSSQLSERVER01;Initial Catalog=GreenAndSpikey;Persist Security Info=True;Integrated Security=SSPI;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.1000.169

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace GnsEntities
{
    using System.Linq;

    #region Unit of work

    public interface IGnsDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Archtype> Archtypes { get; set; } // Archtype
        System.Data.Entity.DbSet<ArchtypeDetail> ArchtypeDetails { get; set; } // ArchtypeDetail
        System.Data.Entity.DbSet<ArchtypeSpellList> ArchtypeSpellLists { get; set; } // ArchtypeSpellList
        System.Data.Entity.DbSet<Character> Characters { get; set; } // Character
        System.Data.Entity.DbSet<CharacterDetail> CharacterDetails { get; set; } // CharacterDetail
        System.Data.Entity.DbSet<CharacterInventory> CharacterInventories { get; set; } // CharacterInventory
        System.Data.Entity.DbSet<CharacterStatu> CharacterStatus { get; set; } // CharacterStatus
        System.Data.Entity.DbSet<Player> Players { get; set; } // Player
        System.Data.Entity.DbSet<PlayerDetail> PlayerDetails { get; set; } // PlayerDetail
        System.Data.Entity.DbSet<PlayerInventory> PlayerInventories { get; set; } // PlayerInventory
        System.Data.Entity.DbSet<Race> Races { get; set; } // Race
        System.Data.Entity.DbSet<RaceDetail> RaceDetails { get; set; } // RaceDetail
        System.Data.Entity.DbSet<Resource> Resources { get; set; } // Resource
        System.Data.Entity.DbSet<Spell> Spells { get; set; } // Spell

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GnsDbContext : System.Data.Entity.DbContext, IGnsDbContext
    {
        public System.Data.Entity.DbSet<Archtype> Archtypes { get; set; } // Archtype
        public System.Data.Entity.DbSet<ArchtypeDetail> ArchtypeDetails { get; set; } // ArchtypeDetail
        public System.Data.Entity.DbSet<ArchtypeSpellList> ArchtypeSpellLists { get; set; } // ArchtypeSpellList
        public System.Data.Entity.DbSet<Character> Characters { get; set; } // Character
        public System.Data.Entity.DbSet<CharacterDetail> CharacterDetails { get; set; } // CharacterDetail
        public System.Data.Entity.DbSet<CharacterInventory> CharacterInventories { get; set; } // CharacterInventory
        public System.Data.Entity.DbSet<CharacterStatu> CharacterStatus { get; set; } // CharacterStatus
        public System.Data.Entity.DbSet<Player> Players { get; set; } // Player
        public System.Data.Entity.DbSet<PlayerDetail> PlayerDetails { get; set; } // PlayerDetail
        public System.Data.Entity.DbSet<PlayerInventory> PlayerInventories { get; set; } // PlayerInventory
        public System.Data.Entity.DbSet<Race> Races { get; set; } // Race
        public System.Data.Entity.DbSet<RaceDetail> RaceDetails { get; set; } // RaceDetail
        public System.Data.Entity.DbSet<Resource> Resources { get; set; } // Resource
        public System.Data.Entity.DbSet<Spell> Spells { get; set; } // Spell

        static GnsDbContext()
        {
            System.Data.Entity.Database.SetInitializer<GnsDbContext>(null);
        }

        public GnsDbContext()
            : base("Name=GnsConnectionString")
        {
        }

        public GnsDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public GnsDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public GnsDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public GnsDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ArchtypeConfiguration());
            modelBuilder.Configurations.Add(new ArchtypeDetailConfiguration());
            modelBuilder.Configurations.Add(new ArchtypeSpellListConfiguration());
            modelBuilder.Configurations.Add(new CharacterConfiguration());
            modelBuilder.Configurations.Add(new CharacterDetailConfiguration());
            modelBuilder.Configurations.Add(new CharacterInventoryConfiguration());
            modelBuilder.Configurations.Add(new CharacterStatuConfiguration());
            modelBuilder.Configurations.Add(new PlayerConfiguration());
            modelBuilder.Configurations.Add(new PlayerDetailConfiguration());
            modelBuilder.Configurations.Add(new PlayerInventoryConfiguration());
            modelBuilder.Configurations.Add(new RaceConfiguration());
            modelBuilder.Configurations.Add(new RaceDetailConfiguration());
            modelBuilder.Configurations.Add(new ResourceConfiguration());
            modelBuilder.Configurations.Add(new SpellConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ArchtypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ArchtypeDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new ArchtypeSpellListConfiguration(schema));
            modelBuilder.Configurations.Add(new CharacterConfiguration(schema));
            modelBuilder.Configurations.Add(new CharacterDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CharacterInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CharacterStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new PlayerConfiguration(schema));
            modelBuilder.Configurations.Add(new PlayerDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new PlayerInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new RaceConfiguration(schema));
            modelBuilder.Configurations.Add(new RaceDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new ResourceConfiguration(schema));
            modelBuilder.Configurations.Add(new SpellConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class GnsDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<GnsDbContext>
    {
        public GnsDbContext Create()
        {
            return new GnsDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeGnsDbContext : IGnsDbContext
    {
        public System.Data.Entity.DbSet<Archtype> Archtypes { get; set; }
        public System.Data.Entity.DbSet<ArchtypeDetail> ArchtypeDetails { get; set; }
        public System.Data.Entity.DbSet<ArchtypeSpellList> ArchtypeSpellLists { get; set; }
        public System.Data.Entity.DbSet<Character> Characters { get; set; }
        public System.Data.Entity.DbSet<CharacterDetail> CharacterDetails { get; set; }
        public System.Data.Entity.DbSet<CharacterInventory> CharacterInventories { get; set; }
        public System.Data.Entity.DbSet<CharacterStatu> CharacterStatus { get; set; }
        public System.Data.Entity.DbSet<Player> Players { get; set; }
        public System.Data.Entity.DbSet<PlayerDetail> PlayerDetails { get; set; }
        public System.Data.Entity.DbSet<PlayerInventory> PlayerInventories { get; set; }
        public System.Data.Entity.DbSet<Race> Races { get; set; }
        public System.Data.Entity.DbSet<RaceDetail> RaceDetails { get; set; }
        public System.Data.Entity.DbSet<Resource> Resources { get; set; }
        public System.Data.Entity.DbSet<Spell> Spells { get; set; }

        public FakeGnsDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Archtypes = new FakeDbSet<Archtype>("ArchtypeId");
            ArchtypeDetails = new FakeDbSet<ArchtypeDetail>("ArchtypeId");
            ArchtypeSpellLists = new FakeDbSet<ArchtypeSpellList>("ArchtypeId", "SpellId");
            Characters = new FakeDbSet<Character>("CharacterId");
            CharacterDetails = new FakeDbSet<CharacterDetail>("CharacterId");
            CharacterInventories = new FakeDbSet<CharacterInventory>("CharacterId");
            CharacterStatus = new FakeDbSet<CharacterStatu>("CharacterId");
            Players = new FakeDbSet<Player>("PlayerId");
            PlayerDetails = new FakeDbSet<PlayerDetail>("PlayerId");
            PlayerInventories = new FakeDbSet<PlayerInventory>("PlayerId");
            Races = new FakeDbSet<Race>("RaceId");
            RaceDetails = new FakeDbSet<RaceDetail>("RaceId");
            Resources = new FakeDbSet<Resource>("ResourceId");
            Spells = new FakeDbSet<Spell>("SpellId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Archtype
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Archtype
    {
        public int ArchtypeId { get; set; } // ArchtypeId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ArchtypeSpellLists where [ArchtypeSpellList].[ArchtypeId] point to this entity (FK_ArchtypeSpellList_Archtype)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ArchtypeSpellList> ArchtypeSpellLists { get; set; } // ArchtypeSpellList.FK_ArchtypeSpellList_Archtype
        /// <summary>
        /// Child Characters where [Character].[CharacterPrimaryArchtypeId] point to this entity (FK_Character_Primary_Archtype)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Character> Characters_CharacterPrimaryArchtypeId { get; set; } // Character.FK_Character_Primary_Archtype
        /// <summary>
        /// Child Characters where [Character].[CharacterSecondaryArchtypeId] point to this entity (FK_Character_Secondary_Archtype)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Character> Characters_CharacterSecondaryArchtypeId { get; set; } // Character.FK_Character_Secondary_Archtype

        // Foreign keys

        /// <summary>
        /// Parent ArchtypeDetail pointed by [Archtype].([ArchtypeId]) (FK_Archtype_ArchtypeDetail)
        /// </summary>
        public virtual ArchtypeDetail ArchtypeDetail { get; set; } // FK_Archtype_ArchtypeDetail

        public Archtype()
        {
            ArchtypeSpellLists = new System.Collections.Generic.List<ArchtypeSpellList>();
            Characters_CharacterPrimaryArchtypeId = new System.Collections.Generic.List<Character>();
            Characters_CharacterSecondaryArchtypeId = new System.Collections.Generic.List<Character>();
        }
    }

    // ArchtypeDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ArchtypeDetail
    {
        public int ArchtypeId { get; set; } // ArchtypeId (Primary key)
        public string ArchtypeName { get; set; } // ArchtypeName (length: 24)
        public string ArchtypeDescription { get; set; } // ArchtypeDescription (length: 100)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) ArchtypeDetail pointed by [Archtype].[ArchtypeId] (FK_Archtype_ArchtypeDetail)
        /// </summary>
        public virtual Archtype Archtype { get; set; } // Archtype.FK_Archtype_ArchtypeDetail
    }

    // ArchtypeSpellList
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ArchtypeSpellList
    {
        public int ArchtypeId { get; set; } // ArchtypeId (Primary key)
        public int SpellId { get; set; } // SpellId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Archtype pointed by [ArchtypeSpellList].([ArchtypeId]) (FK_ArchtypeSpellList_Archtype)
        /// </summary>
        public virtual Archtype Archtype { get; set; } // FK_ArchtypeSpellList_Archtype

        /// <summary>
        /// Parent Spell pointed by [ArchtypeSpellList].([ArchtypeId]) (FK_ArchtypeSpellList_Spell)
        /// </summary>
        public virtual Spell Spell { get; set; } // FK_ArchtypeSpellList_Spell
    }

    // Character
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Character
    {
        public int CharacterId { get; set; } // CharacterId (Primary key)
        public int CharacterRaceId { get; set; } // CharacterRaceId
        public int CharacterPrimaryArchtypeId { get; set; } // CharacterPrimaryArchtypeId
        public int? CharacterSecondaryArchtypeId { get; set; } // CharacterSecondaryArchtypeId
        public int CharacterPrimarySpellId { get; set; } // CharacterPrimarySpellId
        public int? CharacterSecondarySpellId { get; set; } // CharacterSecondarySpellId
        public int? CharacterTertiarySpellId { get; set; } // CharacterTertiarySpellId
        public int? CharacterPassiveSpellId { get; set; } // CharacterPassiveSpellId
        public int? CharacterStatusId { get; set; } // CharacterStatusId

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Character pointed by [CharacterDetail].[CharacterId] (FK_CharacterDetail_Character)
        /// </summary>
        public virtual CharacterDetail CharacterDetail { get; set; } // CharacterDetail.FK_CharacterDetail_Character
        /// <summary>
        /// Parent (One-to-One) Character pointed by [CharacterInventory].[CharacterId] (FK_CharacterInventory_Character)
        /// </summary>
        public virtual CharacterInventory CharacterInventory { get; set; } // CharacterInventory.FK_CharacterInventory_Character
        /// <summary>
        /// Parent (One-to-One) Character pointed by [CharacterStatus].[CharacterId] (FK_CharacterStatus_Character)
        /// </summary>
        public virtual CharacterStatu CharacterStatu { get; set; } // CharacterStatus.FK_CharacterStatus_Character
        /// <summary>
        /// Child Players (Many-to-Many) mapped by table [PlayerCharacterList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Player> Players { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Archtype pointed by [Character].([CharacterPrimaryArchtypeId]) (FK_Character_Primary_Archtype)
        /// </summary>
        public virtual Archtype CharacterPrimaryArchtype { get; set; } // FK_Character_Primary_Archtype

        /// <summary>
        /// Parent Archtype pointed by [Character].([CharacterSecondaryArchtypeId]) (FK_Character_Secondary_Archtype)
        /// </summary>
        public virtual Archtype CharacterSecondaryArchtype { get; set; } // FK_Character_Secondary_Archtype

        /// <summary>
        /// Parent Race pointed by [Character].([CharacterRaceId]) (FK_Character_Race)
        /// </summary>
        public virtual Race Race { get; set; } // FK_Character_Race

        public Character()
        {
            Players = new System.Collections.Generic.List<Player>();
        }
    }

    // CharacterDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterDetail
    {
        public int CharacterId { get; set; } // CharacterId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Character pointed by [CharacterDetail].([CharacterId]) (FK_CharacterDetail_Character)
        /// </summary>
        public virtual Character Character { get; set; } // FK_CharacterDetail_Character
    }

    // CharacterInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterInventory
    {
        public int CharacterId { get; set; } // CharacterId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Character pointed by [CharacterInventory].([CharacterId]) (FK_CharacterInventory_Character)
        /// </summary>
        public virtual Character Character { get; set; } // FK_CharacterInventory_Character
    }

    // CharacterStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterStatu
    {
        public int CharacterId { get; set; } // CharacterId (Primary key)
        public int? CharacterPrimaryResourceId { get; set; } // CharacterPrimaryResourceId
        public int? CharacterSecondaryResourceId { get; set; } // CharacterSecondaryResourceId

        // Foreign keys

        /// <summary>
        /// Parent Character pointed by [CharacterStatus].([CharacterId]) (FK_CharacterStatus_Character)
        /// </summary>
        public virtual Character Character { get; set; } // FK_CharacterStatus_Character

        /// <summary>
        /// Parent Resource pointed by [CharacterStatus].([CharacterPrimaryResourceId]) (FK_CharacterStatus_Primary_Resource)
        /// </summary>
        public virtual Resource CharacterPrimaryResource { get; set; } // FK_CharacterStatus_Primary_Resource

        /// <summary>
        /// Parent Resource pointed by [CharacterStatus].([CharacterSecondaryResourceId]) (FK_CharacterStatus_Secondary_Resource)
        /// </summary>
        public virtual Resource CharacterSecondaryResource { get; set; } // FK_CharacterStatus_Secondary_Resource
    }

    // Player
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Player
    {
        public int PlayerId { get; set; } // PlayerId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Player pointed by [PlayerDetail].[PlayerId] (FK_PlayerDetail_Player)
        /// </summary>
        public virtual PlayerDetail PlayerDetail { get; set; } // PlayerDetail.FK_PlayerDetail_Player
        /// <summary>
        /// Parent (One-to-One) Player pointed by [PlayerInventory].[PlayerId] (FK_PlayerInventory_Player)
        /// </summary>
        public virtual PlayerInventory PlayerInventory { get; set; } // PlayerInventory.FK_PlayerInventory_Player
        /// <summary>
        /// Child Characters (Many-to-Many) mapped by table [PlayerCharacterList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Character> Characters { get; set; } // Many to many mapping

        public Player()
        {
            Characters = new System.Collections.Generic.List<Character>();
        }
    }

    // PlayerDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PlayerDetail
    {
        public int PlayerId { get; set; } // PlayerId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Player pointed by [PlayerDetail].([PlayerId]) (FK_PlayerDetail_Player)
        /// </summary>
        public virtual Player Player { get; set; } // FK_PlayerDetail_Player
    }

    // PlayerInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PlayerInventory
    {
        public int PlayerId { get; set; } // PlayerId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Player pointed by [PlayerInventory].([PlayerId]) (FK_PlayerInventory_Player)
        /// </summary>
        public virtual Player Player { get; set; } // FK_PlayerInventory_Player
    }

    // Race
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Race
    {
        public int RaceId { get; set; } // RaceId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Race pointed by [RaceDetail].[RaceId] (FK_RaceDetail_Race)
        /// </summary>
        public virtual RaceDetail RaceDetail { get; set; } // RaceDetail.FK_RaceDetail_Race
        /// <summary>
        /// Child Characters where [Character].[CharacterRaceId] point to this entity (FK_Character_Race)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Character> Characters { get; set; } // Character.FK_Character_Race
        /// <summary>
        /// Child Resources (Many-to-Many) mapped by table [RaceResourceList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Resource> Resources { get; set; } // Many to many mapping
        /// <summary>
        /// Child Spells (Many-to-Many) mapped by table [RaceSpellList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Spell> Spells { get; set; } // Many to many mapping

        public Race()
        {
            Characters = new System.Collections.Generic.List<Character>();
            Resources = new System.Collections.Generic.List<Resource>();
            Spells = new System.Collections.Generic.List<Spell>();
        }
    }

    // RaceDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceDetail
    {
        public int RaceId { get; set; } // RaceId (Primary key)
        public string RaceName { get; set; } // RaceName (length: 24)
        public string RaceDescription { get; set; } // RaceDescription (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Race pointed by [RaceDetail].([RaceId]) (FK_RaceDetail_Race)
        /// </summary>
        public virtual Race Race { get; set; } // FK_RaceDetail_Race
    }

    // Resource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Resource
    {
        public int ResourceId { get; set; } // ResourceId (Primary key)
        public string ResourceName { get; set; } // ResourceName (length: 24)

        // Reverse navigation

        /// <summary>
        /// Child CharacterStatus where [CharacterStatus].[CharacterPrimaryResourceId] point to this entity (FK_CharacterStatus_Primary_Resource)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CharacterStatu> CharacterStatus_CharacterPrimaryResourceId { get; set; } // CharacterStatus.FK_CharacterStatus_Primary_Resource
        /// <summary>
        /// Child CharacterStatus where [CharacterStatus].[CharacterSecondaryResourceId] point to this entity (FK_CharacterStatus_Secondary_Resource)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CharacterStatu> CharacterStatus_CharacterSecondaryResourceId { get; set; } // CharacterStatus.FK_CharacterStatus_Secondary_Resource
        /// <summary>
        /// Child Races (Many-to-Many) mapped by table [RaceResourceList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Race> Races { get; set; } // Many to many mapping

        public Resource()
        {
            CharacterStatus_CharacterPrimaryResourceId = new System.Collections.Generic.List<CharacterStatu>();
            CharacterStatus_CharacterSecondaryResourceId = new System.Collections.Generic.List<CharacterStatu>();
            Races = new System.Collections.Generic.List<Race>();
        }
    }

    // Spell
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Spell
    {
        public int SpellId { get; set; } // SpellId (Primary key)
        public string SpellName { get; set; } // SpellName (length: 24)
        public int? SpellDamage { get; set; } // SpellDamage
        public int? SpellDamageTypeId { get; set; } // SpellDamageTypeId
        public int SpellCoolDown { get; set; } // SpellCoolDown
        public int SpellCost { get; set; } // SpellCost
        public int? SpellResourceId { get; set; } // SpellResourceId
        public int SpellTargetId { get; set; } // SpellTargetId

        // Reverse navigation

        /// <summary>
        /// Child ArchtypeSpellLists where [ArchtypeSpellList].[ArchtypeId] point to this entity (FK_ArchtypeSpellList_Spell)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ArchtypeSpellList> ArchtypeSpellLists { get; set; } // ArchtypeSpellList.FK_ArchtypeSpellList_Spell
        /// <summary>
        /// Child Races (Many-to-Many) mapped by table [RaceSpellList]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Race> Races { get; set; } // Many to many mapping

        public Spell()
        {
            ArchtypeSpellLists = new System.Collections.Generic.List<ArchtypeSpellList>();
            Races = new System.Collections.Generic.List<Race>();
        }
    }

    #endregion

    #region POCO Configuration

    // Archtype
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ArchtypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Archtype>
    {
        public ArchtypeConfiguration()
            : this("dbo")
        {
        }

        public ArchtypeConfiguration(string schema)
        {
            ToTable("Archtype", schema);
            HasKey(x => x.ArchtypeId);

            Property(x => x.ArchtypeId).HasColumnName(@"ArchtypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.ArchtypeDetail).WithOptional(b => b.Archtype).WillCascadeOnDelete(false); // FK_Archtype_ArchtypeDetail
        }
    }

    // ArchtypeDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ArchtypeDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ArchtypeDetail>
    {
        public ArchtypeDetailConfiguration()
            : this("dbo")
        {
        }

        public ArchtypeDetailConfiguration(string schema)
        {
            ToTable("ArchtypeDetail", schema);
            HasKey(x => x.ArchtypeId);

            Property(x => x.ArchtypeId).HasColumnName(@"ArchtypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ArchtypeName).HasColumnName(@"ArchtypeName").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(24);
            Property(x => x.ArchtypeDescription).HasColumnName(@"ArchtypeDescription").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(100);
        }
    }

    // ArchtypeSpellList
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ArchtypeSpellListConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ArchtypeSpellList>
    {
        public ArchtypeSpellListConfiguration()
            : this("dbo")
        {
        }

        public ArchtypeSpellListConfiguration(string schema)
        {
            ToTable("ArchtypeSpellList", schema);
            HasKey(x => new { x.ArchtypeId, x.SpellId });

            Property(x => x.ArchtypeId).HasColumnName(@"ArchtypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SpellId).HasColumnName(@"SpellId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Archtype).WithMany(b => b.ArchtypeSpellLists).HasForeignKey(c => c.ArchtypeId).WillCascadeOnDelete(false); // FK_ArchtypeSpellList_Archtype
            HasRequired(a => a.Spell).WithMany(b => b.ArchtypeSpellLists).HasForeignKey(c => c.ArchtypeId).WillCascadeOnDelete(false); // FK_ArchtypeSpellList_Spell
        }
    }

    // Character
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Character>
    {
        public CharacterConfiguration()
            : this("dbo")
        {
        }

        public CharacterConfiguration(string schema)
        {
            ToTable("Character", schema);
            HasKey(x => x.CharacterId);

            Property(x => x.CharacterId).HasColumnName(@"CharacterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CharacterRaceId).HasColumnName(@"CharacterRaceId").HasColumnType("int").IsRequired();
            Property(x => x.CharacterPrimaryArchtypeId).HasColumnName(@"CharacterPrimaryArchtypeId").HasColumnType("int").IsRequired();
            Property(x => x.CharacterSecondaryArchtypeId).HasColumnName(@"CharacterSecondaryArchtypeId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterPrimarySpellId).HasColumnName(@"CharacterPrimarySpellId").HasColumnType("int").IsRequired();
            Property(x => x.CharacterSecondarySpellId).HasColumnName(@"CharacterSecondarySpellId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterTertiarySpellId).HasColumnName(@"CharacterTertiarySpellId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterPassiveSpellId).HasColumnName(@"CharacterPassiveSpellId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterStatusId).HasColumnName(@"CharacterStatusId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CharacterSecondaryArchtype).WithMany(b => b.Characters_CharacterSecondaryArchtypeId).HasForeignKey(c => c.CharacterSecondaryArchtypeId).WillCascadeOnDelete(false); // FK_Character_Secondary_Archtype
            HasRequired(a => a.CharacterPrimaryArchtype).WithMany(b => b.Characters_CharacterPrimaryArchtypeId).HasForeignKey(c => c.CharacterPrimaryArchtypeId).WillCascadeOnDelete(false); // FK_Character_Primary_Archtype
            HasRequired(a => a.Race).WithMany(b => b.Characters).HasForeignKey(c => c.CharacterRaceId).WillCascadeOnDelete(false); // FK_Character_Race
            HasMany(t => t.Players).WithMany(t => t.Characters).Map(m =>
            {
                m.ToTable("PlayerCharacterList", "dbo");
                m.MapLeftKey("CharacterId");
                m.MapRightKey("PlayerId");
            });
        }
    }

    // CharacterDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharacterDetail>
    {
        public CharacterDetailConfiguration()
            : this("dbo")
        {
        }

        public CharacterDetailConfiguration(string schema)
        {
            ToTable("CharacterDetail", schema);
            HasKey(x => x.CharacterId);

            Property(x => x.CharacterId).HasColumnName(@"CharacterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Character).WithOptional(b => b.CharacterDetail).WillCascadeOnDelete(false); // FK_CharacterDetail_Character
        }
    }

    // CharacterInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharacterInventory>
    {
        public CharacterInventoryConfiguration()
            : this("dbo")
        {
        }

        public CharacterInventoryConfiguration(string schema)
        {
            ToTable("CharacterInventory", schema);
            HasKey(x => x.CharacterId);

            Property(x => x.CharacterId).HasColumnName(@"CharacterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Character).WithOptional(b => b.CharacterInventory).WillCascadeOnDelete(false); // FK_CharacterInventory_Character
        }
    }

    // CharacterStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharacterStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharacterStatu>
    {
        public CharacterStatuConfiguration()
            : this("dbo")
        {
        }

        public CharacterStatuConfiguration(string schema)
        {
            ToTable("CharacterStatus", schema);
            HasKey(x => x.CharacterId);

            Property(x => x.CharacterId).HasColumnName(@"CharacterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CharacterPrimaryResourceId).HasColumnName(@"CharacterPrimaryResourceId").HasColumnType("int").IsOptional();
            Property(x => x.CharacterSecondaryResourceId).HasColumnName(@"CharacterSecondaryResourceId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CharacterPrimaryResource).WithMany(b => b.CharacterStatus_CharacterPrimaryResourceId).HasForeignKey(c => c.CharacterPrimaryResourceId).WillCascadeOnDelete(false); // FK_CharacterStatus_Primary_Resource
            HasOptional(a => a.CharacterSecondaryResource).WithMany(b => b.CharacterStatus_CharacterSecondaryResourceId).HasForeignKey(c => c.CharacterSecondaryResourceId).WillCascadeOnDelete(false); // FK_CharacterStatus_Secondary_Resource
            HasRequired(a => a.Character).WithOptional(b => b.CharacterStatu).WillCascadeOnDelete(false); // FK_CharacterStatus_Character
        }
    }

    // Player
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PlayerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Player>
    {
        public PlayerConfiguration()
            : this("dbo")
        {
        }

        public PlayerConfiguration(string schema)
        {
            ToTable("Player", schema);
            HasKey(x => x.PlayerId);

            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // PlayerDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PlayerDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlayerDetail>
    {
        public PlayerDetailConfiguration()
            : this("dbo")
        {
        }

        public PlayerDetailConfiguration(string schema)
        {
            ToTable("PlayerDetail", schema);
            HasKey(x => x.PlayerId);

            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Player).WithOptional(b => b.PlayerDetail).WillCascadeOnDelete(false); // FK_PlayerDetail_Player
        }
    }

    // PlayerInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PlayerInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlayerInventory>
    {
        public PlayerInventoryConfiguration()
            : this("dbo")
        {
        }

        public PlayerInventoryConfiguration(string schema)
        {
            ToTable("PlayerInventory", schema);
            HasKey(x => x.PlayerId);

            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Player).WithOptional(b => b.PlayerInventory).WillCascadeOnDelete(false); // FK_PlayerInventory_Player
        }
    }

    // Race
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Race>
    {
        public RaceConfiguration()
            : this("dbo")
        {
        }

        public RaceConfiguration(string schema)
        {
            ToTable("Race", schema);
            HasKey(x => x.RaceId);

            Property(x => x.RaceId).HasColumnName(@"RaceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            HasMany(t => t.Resources).WithMany(t => t.Races).Map(m =>
            {
                m.ToTable("RaceResourceList", "dbo");
                m.MapLeftKey("RaceId");
                m.MapRightKey("ResourceId");
            });
            HasMany(t => t.Spells).WithMany(t => t.Races).Map(m =>
            {
                m.ToTable("RaceSpellList", "dbo");
                m.MapLeftKey("RaceId");
                m.MapRightKey("SpellId");
            });
        }
    }

    // RaceDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RaceDetail>
    {
        public RaceDetailConfiguration()
            : this("dbo")
        {
        }

        public RaceDetailConfiguration(string schema)
        {
            ToTable("RaceDetail", schema);
            HasKey(x => x.RaceId);

            Property(x => x.RaceId).HasColumnName(@"RaceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RaceName).HasColumnName(@"RaceName").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(24);
            Property(x => x.RaceDescription).HasColumnName(@"RaceDescription").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.Race).WithOptional(b => b.RaceDetail).WillCascadeOnDelete(false); // FK_RaceDetail_Race
        }
    }

    // Resource
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Resource>
    {
        public ResourceConfiguration()
            : this("dbo")
        {
        }

        public ResourceConfiguration(string schema)
        {
            ToTable("Resource", schema);
            HasKey(x => x.ResourceId);

            Property(x => x.ResourceId).HasColumnName(@"ResourceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResourceName).HasColumnName(@"ResourceName").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(24);
        }
    }

    // Spell
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpellConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Spell>
    {
        public SpellConfiguration()
            : this("dbo")
        {
        }

        public SpellConfiguration(string schema)
        {
            ToTable("Spell", schema);
            HasKey(x => x.SpellId);

            Property(x => x.SpellId).HasColumnName(@"SpellId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SpellName).HasColumnName(@"SpellName").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(24);
            Property(x => x.SpellDamage).HasColumnName(@"SpellDamage").HasColumnType("int").IsOptional();
            Property(x => x.SpellDamageTypeId).HasColumnName(@"SpellDamageTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SpellCoolDown).HasColumnName(@"SpellCoolDown").HasColumnType("int").IsRequired();
            Property(x => x.SpellCost).HasColumnName(@"SpellCost").HasColumnType("int").IsRequired();
            Property(x => x.SpellResourceId).HasColumnName(@"SpellResourceId").HasColumnType("int").IsOptional();
            Property(x => x.SpellTargetId).HasColumnName(@"SpellTargetId").HasColumnType("int").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

